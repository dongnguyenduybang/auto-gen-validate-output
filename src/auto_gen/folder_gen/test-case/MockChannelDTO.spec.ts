
    import axios from 'axios';
    import { plainToInstance } from 'class-transformer';
    import { MockChannelDTOResponse } from '../../dto_response/MockChannelDTO.response.dto';
    import { validate } from 'class-validator';
    import { validationRulesMockChannel } from '../../validates/mock-channel/validate-mock-channel';
    import { validateLogicData } from '../../validates/validate-logic';

    describe('Testcase for MockChannelDTO', () => {
        
          it('Test case #1 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #3 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #4 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #5 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #6 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #7 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #8 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #9 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #10 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #11 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #12 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #13 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #14 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #15 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #16 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #17 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #18 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #19 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #20 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #21 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #22 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #23 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #24 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #25 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #26 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #27 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #28 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #29 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #30 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #31 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #32 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #33 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #34 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #35 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #36 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #37 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #38 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #39 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #40 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #41 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #42 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #43 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #44 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #45 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #46 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #47 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #48 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #49 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #50 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #51 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #52 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #53 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #54 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #55 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #56 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #57 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #58 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #59 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #60 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":null,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #61 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":null,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #62 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":null,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #63 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #64 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #65 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #66 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #67 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #68 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #69 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #70 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #71 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #72 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #73 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #74 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #75 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #76 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #77 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #78 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #79 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #80 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #81 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #82 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #83 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #84 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #85 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #86 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #87 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #88 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":null,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #89 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"quantity":null,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #90 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":null,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #91 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #92 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #93 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #94 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #95 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #96 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #97 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #98 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":null,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":null,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #99 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #100 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #101 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #102 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #103 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #104 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #105 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #106 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #107 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #108 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #109 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #110 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":"","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #111 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #112 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #113 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #114 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #115 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #116 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #117 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":"","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #118 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #119 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #120 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #121 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #122 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #123 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #124 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #125 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #126 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #127 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #128 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #129 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #130 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #131 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"quantity":"","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #132 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #133 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #134 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #135 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #136 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #137 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #138 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"quantity":"","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #139 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #140 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #141 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #142 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #143 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #144 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #145 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":"","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #146 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #147 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #148 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #149 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #150 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #151 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #152 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #153 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #154 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #155 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #156 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #157 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #158 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #159 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #160 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #161 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #162 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #163 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #164 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #165 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #166 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #167 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #168 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #169 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #170 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #171 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #172 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #173 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #174 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #175 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #176 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #177 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #178 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #179 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #180 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #181 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #182 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #183 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #184 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #185 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #186 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #187 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #188 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #189 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #190 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #191 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #192 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #193 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #194 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #195 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #196 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":"random_string","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":"random_string","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #197 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #198 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #199 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #200 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #201 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #202 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #203 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #204 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #205 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #206 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #207 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":1,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #208 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":1,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #209 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":1,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #210 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #211 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #212 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #213 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #214 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #215 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #216 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #217 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #218 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #219 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #220 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #221 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #222 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #223 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #224 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #225 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #226 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #227 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #228 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #229 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #230 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #231 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #232 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #233 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #234 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #235 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":1,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #236 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0"] ', async () => {
            const payload = {"quantity":1,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #237 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":1,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #238 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #239 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #240 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #241 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #242 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #243 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #244 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #245 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":1,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":1,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #246 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #247 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #248 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #249 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":0,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #250 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":0,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #251 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":0,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #252 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #253 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #254 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #255 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #256 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":0,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #257 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":0,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #258 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":0,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #259 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #260 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #261 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #262 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #263 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #264 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #265 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #266 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #267 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #268 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #269 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #270 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #271 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #272 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #273 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #274 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #275 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #276 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #277 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #278 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #279 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #280 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #281 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #282 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #283 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #284 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":0,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #285 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0"] ', async () => {
            const payload = {"quantity":0,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #286 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":0,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #287 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #288 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #289 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #290 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #291 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #292 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #293 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #294 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":0,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":0,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #295 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #296 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #297 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #298 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":101,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #299 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":101,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #300 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":101,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #301 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #302 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #303 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #304 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #305 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":101,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #306 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":101,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #307 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":101,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #308 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #309 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #310 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #311 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #312 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #313 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #314 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #315 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #316 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #317 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #318 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #319 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #320 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #321 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #322 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #323 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #324 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #325 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #326 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #327 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #328 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #329 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #330 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #331 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #332 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #333 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":101,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #334 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"quantity":101,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #335 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":101,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #336 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #337 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #338 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #339 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #340 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #341 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #342 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #343 with expect errors ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"quantity":101,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"quantity":101,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #344 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #345 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #346 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #347 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #348 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #349 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #350 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #351 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #352 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #353 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #354 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #355 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #356 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #357 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #358 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #359 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #360 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #361 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #362 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #363 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #364 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #365 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #366 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #367 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #368 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #369 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #370 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #371 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #372 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #373 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #374 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #375 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #376 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #377 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #378 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #379 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #380 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #381 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #382 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #383 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #384 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #385 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #386 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #387 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #388 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #389 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #390 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #391 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #392 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #393 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #394 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #395 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #396 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #397 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #398 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #399 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #400 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #401 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #402 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #403 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #404 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #405 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #406 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #407 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #408 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #409 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #410 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #411 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #412 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #413 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #414 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #415 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #416 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #417 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #418 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #419 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #420 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #421 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #422 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #423 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #424 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #425 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #426 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #427 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #428 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #429 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #430 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #431 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #432 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #433 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #434 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #435 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #436 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #437 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #438 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #439 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #440 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #441 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":null,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #442 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #443 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #444 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #445 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #446 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #447 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #448 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #449 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #450 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #451 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #452 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #453 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #454 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #455 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #456 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #457 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #458 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #459 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #460 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #461 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #462 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #463 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #464 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #465 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #466 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #467 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #468 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #469 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #470 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #471 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #472 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #473 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #474 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #475 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #476 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #477 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #478 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #479 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #480 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #481 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #482 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #483 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #484 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #485 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #486 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #487 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #488 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #489 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #490 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #491 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #492 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #493 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #494 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #495 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #496 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #497 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #498 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #499 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #500 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #501 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #502 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #503 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #504 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #505 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #506 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #507 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #508 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #509 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #510 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #511 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #512 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #513 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #514 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #515 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #516 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #517 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #518 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #519 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #520 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #521 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #522 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #523 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #524 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #525 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #526 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #527 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #528 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #529 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #530 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #531 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #532 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #533 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #534 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #535 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #536 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #537 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #538 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #539 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":"random_string","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #540 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #541 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #542 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #543 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #544 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #545 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #546 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #547 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #548 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #549 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #550 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #551 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #552 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #553 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #554 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #555 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #556 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #557 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #558 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #559 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #560 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #561 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #562 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #563 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #564 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #565 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #566 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #567 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #568 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #569 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #570 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #571 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #572 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #573 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #574 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #575 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #576 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #577 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #578 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #579 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #580 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #581 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #582 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #583 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #584 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #585 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #586 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #587 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #588 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":1,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #589 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #590 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #591 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #592 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #593 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #594 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #595 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #596 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #597 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #598 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #599 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #600 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #601 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #602 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #603 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #604 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #605 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #606 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #607 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #608 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #609 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #610 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #611 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #612 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #613 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #614 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #615 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #616 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #617 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #618 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #619 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #620 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #621 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #622 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #623 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #624 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #625 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #626 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #627 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #628 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #629 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #630 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #631 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #632 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #633 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #634 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #635 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #636 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #637 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":0,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #638 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #639 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #640 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #641 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #642 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #643 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #644 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #645 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #646 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #647 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #648 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #649 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #650 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #651 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #652 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #653 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #654 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #655 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #656 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #657 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #658 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #659 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #660 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #661 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #662 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #663 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #664 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #665 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #666 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #667 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #668 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #669 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #670 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #671 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #672 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #673 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #674 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #675 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #676 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #677 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #678 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #679 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #680 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #681 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #682 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #683 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #684 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #685 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #686 with expect errors ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":null,"quantity":101,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #687 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #688 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #689 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #690 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #691 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #692 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #693 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #694 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #695 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #696 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #697 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #698 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #699 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #700 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #701 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #702 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #703 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #704 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #705 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #706 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #707 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #708 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #709 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #710 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #711 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #712 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #713 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #714 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #715 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #716 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #717 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #718 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #719 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #720 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #721 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #722 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #723 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #724 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #725 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #726 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #727 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #728 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #729 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #730 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #731 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #732 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #733 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #734 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #735 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #736 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #737 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #738 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #739 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #740 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #741 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #742 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #743 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #744 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #745 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #746 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #747 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #748 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #749 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #750 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #751 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #752 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #753 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #754 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #755 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #756 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #757 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #758 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #759 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #760 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #761 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #762 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #763 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #764 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #765 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #766 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #767 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #768 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #769 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #770 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #771 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #772 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #773 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #774 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #775 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #776 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #777 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #778 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #779 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #780 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #781 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #782 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #783 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #784 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":null,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #785 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #786 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #787 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #788 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #789 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #790 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #791 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #792 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #793 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #794 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #795 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #796 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #797 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #798 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #799 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #800 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #801 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #802 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #803 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #804 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #805 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #806 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #807 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #808 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #809 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #810 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #811 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #812 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #813 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #814 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #815 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #816 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #817 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #818 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #819 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #820 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #821 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #822 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #823 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #824 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #825 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #826 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #827 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #828 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #829 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #830 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #831 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #832 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #833 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #834 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #835 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #836 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #837 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #838 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #839 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #840 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #841 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #842 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #843 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #844 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #845 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #846 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #847 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #848 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #849 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #850 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #851 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #852 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #853 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #854 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #855 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #856 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #857 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #858 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #859 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #860 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #861 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #862 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #863 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #864 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #865 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #866 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #867 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #868 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #869 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #870 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #871 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #872 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #873 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #874 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #875 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #876 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #877 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #878 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #879 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #880 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #881 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #882 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":"random_string","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #883 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #884 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #885 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #886 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #887 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #888 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #889 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #890 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #891 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #892 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #893 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #894 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #895 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #896 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #897 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #898 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #899 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #900 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #901 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #902 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #903 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #904 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #905 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #906 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #907 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #908 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #909 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #910 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #911 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #912 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #913 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #914 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #915 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #916 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #917 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #918 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #919 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #920 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #921 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #922 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #923 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #924 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #925 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #926 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #927 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #928 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #929 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #930 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #931 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":1,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #932 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #933 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #934 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #935 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":0,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #936 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":0,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #937 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":0,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #938 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #939 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #940 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #941 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #942 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #943 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #944 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #945 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #946 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #947 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #948 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #949 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #950 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #951 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #952 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #953 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #954 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #955 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #956 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #957 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #958 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #959 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #960 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #961 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #962 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #963 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #964 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #965 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #966 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #967 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #968 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #969 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #970 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #971 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #972 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #973 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #974 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #975 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #976 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #977 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #978 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #979 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #980 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":0,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #981 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #982 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #983 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #984 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":101,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #985 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":101,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #986 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":101,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #987 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #988 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #989 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #990 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #991 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #992 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #993 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #994 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #995 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #996 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #997 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #998 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #999 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1000 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1001 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1002 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1003 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1004 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1005 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1006 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1007 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1008 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1009 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1010 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1011 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1012 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1013 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1014 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1015 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1016 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1017 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1018 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1019 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1020 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1021 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1022 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1023 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1024 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1025 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1026 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1027 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1028 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1029 with expect errors ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"","quantity":101,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix should not be empty","prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1030 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1031 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1032 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1033 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1034 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1035 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1036 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1037 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1038 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1039 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1040 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1041 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1042 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1043 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1044 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1045 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1046 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1047 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1048 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1049 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1050 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1051 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1052 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1053 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1054 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1055 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1056 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1057 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1058 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1059 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1060 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1061 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1062 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1063 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1064 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1065 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1066 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1067 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1068 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1069 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1070 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1071 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1072 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1073 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1074 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1075 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1076 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1077 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1078 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1079 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1080 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1081 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1082 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1083 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1084 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1085 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1086 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1087 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1088 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1089 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1090 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1091 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1092 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1093 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1094 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1095 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1096 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1097 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1098 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1099 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1100 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1101 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1102 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1103 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1104 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1105 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1106 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1107 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1108 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1109 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1110 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1111 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1112 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1113 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1114 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1115 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1116 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1117 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1118 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1119 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1120 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1121 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1122 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1123 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1124 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1125 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1126 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1127 with expect errors ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":null,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1128 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1129 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1130 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1131 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1132 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1133 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1134 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1135 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1136 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1137 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1138 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1139 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1140 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1141 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1142 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1143 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1144 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1145 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1146 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1147 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1148 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1149 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1150 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1151 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1152 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1153 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1154 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1155 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1156 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1157 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1158 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1159 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1160 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1161 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1162 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1163 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1164 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1165 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1166 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1167 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1168 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1169 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1170 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1171 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1172 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1173 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1174 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1175 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1176 with expect errors ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1177 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1178 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1179 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1180 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1181 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1182 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1183 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1184 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1185 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1186 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1187 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1188 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1189 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1190 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1191 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1192 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1193 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1194 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1195 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1196 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1197 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1198 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1199 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1200 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1201 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1202 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1203 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1204 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1205 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1206 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1207 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1208 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1209 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1210 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1211 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1212 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1213 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1214 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1215 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1216 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1217 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1218 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1219 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1220 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1221 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1222 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1223 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1224 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1225 with expect errors ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":"random_string","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1226 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1227 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1228 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1229 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1230 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1231 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1232 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1233 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1234 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1235 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1236 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1237 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1238 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1239 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1240 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1241 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1242 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1243 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1244 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1245 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1246 with expect errors ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1247 with expect errors ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1248 with expect errors ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1249 with expect errors ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1250 with expect errors ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1251 with expect errors ["prefix must be a string","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1252 with expect errors ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1253 with expect errors ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1254 with expect errors ["prefix must be a string","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1255 with expect errors ["prefix must be a string","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1256 with expect errors ["prefix must be a string","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1257 with expect errors ["prefix must be a string","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1258 with expect errors ["prefix must be a string"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1259 with expect errors ["prefix must be a string","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1260 with expect errors ["prefix must be a string","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1261 with expect errors ["prefix must be a string","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1262 with expect errors ["prefix must be a string","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1263 with expect errors ["prefix must be a string","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1264 with expect errors ["prefix must be a string","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1265 with expect errors ["prefix must be a string","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1266 with expect errors ["prefix must be a string","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1267 with expect errors ["prefix must be a string","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1268 with expect errors ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1269 with expect errors ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1270 with expect errors ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1271 with expect errors ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1272 with expect errors ["prefix must be a string","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1273 with expect errors ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1274 with expect errors ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":1,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1275 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1276 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1277 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1278 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1279 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1280 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1281 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1282 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1283 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1284 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1285 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1286 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1287 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1288 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1289 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1290 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1291 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1292 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1293 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1294 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1295 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1296 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1297 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1298 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1299 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1300 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1301 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1302 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1303 with expect errors ["prefix must be a string","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1304 with expect errors ["prefix must be a string","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1305 with expect errors ["prefix must be a string","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1306 with expect errors ["prefix must be a string","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1307 with expect errors ["prefix must be a string","quantity must not be less than 1"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1308 with expect errors ["prefix must be a string","quantity must not be less than 1","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1309 with expect errors ["prefix must be a string","quantity must not be less than 1","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1310 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1311 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1312 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1313 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1314 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1315 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1316 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1317 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1318 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1319 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1320 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1321 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1322 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1323 with expect errors ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":0,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1324 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1325 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1326 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1327 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1328 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1329 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1330 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1331 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1332 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1333 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1334 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1335 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1336 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1337 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1338 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1339 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1340 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1341 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1342 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1343 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1344 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1345 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1346 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1347 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1348 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1349 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1350 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1351 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1352 with expect errors ["prefix must be a string","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1353 with expect errors ["prefix must be a string","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1354 with expect errors ["prefix must be a string","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1355 with expect errors ["prefix must be a string","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1356 with expect errors ["prefix must be a string","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1357 with expect errors ["prefix must be a string","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1358 with expect errors ["prefix must be a string","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1359 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1360 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1361 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1362 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1363 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1364 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1365 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1366 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1367 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1368 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1369 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1370 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1371 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1372 with expect errors ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":12345,"quantity":101,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be a string","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1373 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1374 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1375 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1376 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1377 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1378 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1379 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1380 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1381 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1382 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1383 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1384 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1385 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1386 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1387 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1388 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1389 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1390 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1391 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1392 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1393 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1394 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1395 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1396 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1397 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1398 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1399 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1400 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1401 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1402 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1403 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1404 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1405 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1406 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1407 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1408 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1409 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1410 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1411 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1412 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1413 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1414 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1415 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1416 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1417 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1418 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1419 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1420 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1421 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1422 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1423 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1424 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1425 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1426 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1427 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1428 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1429 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1430 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1431 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1432 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1433 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1434 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1435 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1436 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1437 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1438 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1439 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1440 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1441 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1442 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1443 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1444 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1445 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1446 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1447 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1448 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1449 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1450 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1451 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1452 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1453 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1454 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1455 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1456 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1457 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1458 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1459 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1460 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1461 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1462 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1463 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1464 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1465 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1466 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1467 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1468 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1469 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1470 with expect errors ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":null,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1471 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1472 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1473 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1474 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1475 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1476 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1477 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1478 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1479 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1480 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1481 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1482 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1483 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1484 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1485 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1486 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1487 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1488 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1489 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1490 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1491 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1492 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1493 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1494 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1495 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1496 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1497 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1498 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1499 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1500 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1501 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1502 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1503 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1504 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1505 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1506 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1507 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1508 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1509 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1510 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1511 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1512 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1513 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1514 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1515 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1516 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1517 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1518 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1519 with expect errors ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1520 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1521 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1522 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1523 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1524 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1525 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1526 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1527 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1528 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1529 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1530 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1531 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1532 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1533 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1534 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1535 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1536 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1537 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1538 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1539 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1540 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1541 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1542 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1543 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1544 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1545 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1546 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1547 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1548 with expect errors ["quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1549 with expect errors ["quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1550 with expect errors ["quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1551 with expect errors ["quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1552 with expect errors ["quantity must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1553 with expect errors ["quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1554 with expect errors ["quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1555 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1556 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1557 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1558 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1559 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1560 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1561 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1562 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1563 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1564 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1565 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1566 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1567 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1568 with expect errors ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":"random_string","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1569 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1570 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1571 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1572 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1573 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1574 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1575 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1576 with expect errors ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1577 with expect errors ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1578 with expect errors ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1579 with expect errors ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1580 with expect errors ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1581 with expect errors ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1582 with expect errors ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1583 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1584 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1585 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1586 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1587 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1588 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1589 with expect errors ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1590 with expect errors ["totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1591 with expect errors ["totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1592 with expect errors ["totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1593 with expect errors ["totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1594 with expect errors ["totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1595 with expect errors ["totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1596 with expect errors ["totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1597 with expect errors ["typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1598 with expect errors ["typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1599 with expect errors ["typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1600 with expect errors ["typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1601 with expect errors [] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = [];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1602 with expect errors ["typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1603 with expect errors ["typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1604 with expect errors ["totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1605 with expect errors ["totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1606 with expect errors ["totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1607 with expect errors ["totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1608 with expect errors ["totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1609 with expect errors ["totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1610 with expect errors ["totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1611 with expect errors ["totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1612 with expect errors ["totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1613 with expect errors ["totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1614 with expect errors ["totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1615 with expect errors ["totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1616 with expect errors ["totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1617 with expect errors ["totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":1,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1618 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1619 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1620 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1621 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1622 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1623 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1624 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1625 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1626 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1627 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1628 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1629 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1630 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1631 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1632 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1633 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1634 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1635 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1636 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1637 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1638 with expect errors ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1639 with expect errors ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1640 with expect errors ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1641 with expect errors ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1642 with expect errors ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1643 with expect errors ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1644 with expect errors ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1645 with expect errors ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1646 with expect errors ["quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1647 with expect errors ["quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1648 with expect errors ["quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1649 with expect errors ["quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1650 with expect errors ["quantity must not be less than 1"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1651 with expect errors ["quantity must not be less than 1","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1652 with expect errors ["quantity must not be less than 1","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1653 with expect errors ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1654 with expect errors ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1655 with expect errors ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1656 with expect errors ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1657 with expect errors ["quantity must not be less than 1","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1658 with expect errors ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1659 with expect errors ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1660 with expect errors ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1661 with expect errors ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1662 with expect errors ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1663 with expect errors ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1664 with expect errors ["quantity must not be less than 1","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1665 with expect errors ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1666 with expect errors ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":0,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1667 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1668 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1669 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1670 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1671 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1672 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1673 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1674 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1675 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1676 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1677 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1678 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1679 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1680 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1681 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1682 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1683 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1684 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1685 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1686 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1687 with expect errors ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1688 with expect errors ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1689 with expect errors ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1690 with expect errors ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1691 with expect errors ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1692 with expect errors ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1693 with expect errors ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1694 with expect errors ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1695 with expect errors ["quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1696 with expect errors ["quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1697 with expect errors ["quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1698 with expect errors ["quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1699 with expect errors ["quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1700 with expect errors ["quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1701 with expect errors ["quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1702 with expect errors ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1703 with expect errors ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1704 with expect errors ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1705 with expect errors ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1706 with expect errors ["quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1707 with expect errors ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1708 with expect errors ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1709 with expect errors ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1710 with expect errors ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1711 with expect errors ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1712 with expect errors ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1713 with expect errors ["quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1714 with expect errors ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1715 with expect errors ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"duy12345","quantity":101,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1716 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1717 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1718 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1719 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1720 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1721 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1722 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1723 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1724 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1725 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1726 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1727 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1728 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1729 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1730 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1731 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1732 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1733 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1734 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1735 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1736 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1737 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1738 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1739 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1740 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1741 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1742 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1743 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1744 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1745 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1746 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1747 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1748 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1749 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1750 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1751 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1752 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1753 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1754 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1755 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1756 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1757 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1758 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1759 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1760 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1761 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1762 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1763 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1764 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1765 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1766 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1767 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1768 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1769 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1770 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1771 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1772 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1773 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1774 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1775 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1776 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1777 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1778 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1779 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1780 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1781 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1782 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1783 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1784 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1785 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1786 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1787 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1788 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1789 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1790 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1791 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1792 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1793 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1794 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1795 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1796 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1797 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1798 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1799 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1800 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1801 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1802 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1803 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1804 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1805 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1806 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1807 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1808 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1809 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1810 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1811 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1812 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1813 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":null,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1814 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1815 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1816 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1817 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1818 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1819 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1820 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1821 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1822 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1823 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1824 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1825 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1826 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1827 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1828 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1829 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1830 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1831 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1832 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1833 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1834 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1835 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1836 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1837 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1838 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1839 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1840 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1841 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1842 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1843 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1844 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1845 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1846 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1847 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1848 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1849 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1850 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1851 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1852 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1853 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1854 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1855 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1856 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1857 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1858 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1859 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1860 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1861 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1862 with expect errors ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity should not be empty","quantity should not be empty","quantity must be a number conforming to the specified constraints","quantity must not be less than 1","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1863 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1864 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1865 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1866 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1867 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1868 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1869 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1870 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1871 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1872 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1873 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1874 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1875 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1876 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1877 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1878 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1879 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1880 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1881 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1882 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1883 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1884 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1885 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1886 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1887 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1888 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1889 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1890 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1891 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1892 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1893 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1894 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1895 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1896 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1897 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1898 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1899 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1900 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1901 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1902 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1903 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1904 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1905 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1906 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1907 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1908 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1909 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1910 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1911 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":"random_string","totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must be a number conforming to the specified constraints","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1912 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1913 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1914 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1915 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1916 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1917 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1918 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1919 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1920 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1921 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1922 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1923 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1924 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1925 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1926 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1927 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1928 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1929 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1930 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1931 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1932 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1933 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1934 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1935 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1936 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1937 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1938 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1939 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1940 with expect errors ["prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1941 with expect errors ["prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1942 with expect errors ["prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1943 with expect errors ["prefix must be longer than or equal to 5 characters","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1944 with expect errors ["prefix must be longer than or equal to 5 characters"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1945 with expect errors ["prefix must be longer than or equal to 5 characters","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1946 with expect errors ["prefix must be longer than or equal to 5 characters","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1947 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1948 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1949 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1950 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1951 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1952 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1953 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1954 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1955 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1956 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1957 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1958 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1959 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1960 with expect errors ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":1,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1961 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1962 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1963 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1964 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1965 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1966 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1967 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1968 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1969 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1970 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1971 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1972 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1973 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1974 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1975 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1976 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1977 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1978 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1979 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1980 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1981 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1982 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1983 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1984 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1985 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1986 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1987 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1988 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1989 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1990 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1991 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1992 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1993 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1994 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1995 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1996 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1997 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1998 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #1999 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2000 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2001 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2002 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2003 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2004 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2005 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2006 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2007 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2008 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2009 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":0,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be less than 1","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2010 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2011 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2012 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2013 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2014 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2015 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2016 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2017 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2018 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2019 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2020 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2021 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2022 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2023 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":null,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2024 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2025 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2026 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2027 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2028 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2029 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2030 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages should not be empty","totalMessages should not be empty","totalMessages must be a number conforming to the specified constraints","totalMessages must not be less than 0","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2031 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2032 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2033 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2034 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2035 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2036 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2037 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":"random_string","typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must be a number conforming to the specified constraints","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2038 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2039 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2040 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2041 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2042 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2043 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2044 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2045 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2046 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2047 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2048 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2049 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2050 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2051 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":-1,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2052 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1001};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1001}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2053 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":null};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":null}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2054 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":""};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":""}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel should not be empty","typeChannel should not be empty","typeChannel must be a number conforming to the specified constraints","typeChannel must not be less than 0","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2055 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":"random_string"};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":"random_string"}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must be a number conforming to the specified constraints"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2056 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":0};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":0}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2057 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":-1};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":-1}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be less than 0"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });

          it('Test case #2058 with expect errors ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"] ', async () => {
            const payload = {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":4};
            try {
              const response = await axios({
                method: 'post',
                url: 'https://api-sb11.rpc.ziichat.dev/InternalFaker/MockUsers',
                headers: {"Content-Type":"application/json"},
                data: {"prefix":"aaaa","quantity":101,"totalMessages":1001,"typeChannel":4}
              });
              const dataResponse = plainToInstance(MockChannelDTOResponse, response.data.data[0]);
              const errors = await validate(dataResponse);
              if (errors.length > 0) {
                console.error("validation failed:", errors);
              } else {
                const result = validateLogicData(dataResponse, validationRulesMockChannel, payload);
                console.log(result)
              }
            } catch (error) {
              const expectedError = ["prefix must be longer than or equal to 5 characters","quantity must not be greater than 100","totalMessages must not be greater than 1000","typeChannel must not be greater than 3"];

              expectedError.forEach((errorDetail) => {
                expect(error.response.data.error.details).toContainEqual(errorDetail);
              });
            }
          });
      });
  