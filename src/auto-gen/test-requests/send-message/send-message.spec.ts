
    import fs from 'fs';
    import path from 'path';
    import axios from 'axios';
    import { getTime, summarizeErrors, summaryFields } from '../../utils/helper';
    import { executeAllSteps, resolveVariables } from '../../utils/test-executor';
    import { TestContext } from '../../utils/text-context';
    describe('Testcase for send-message', () => {
        let totalTests = 0;
        let passed201 = 0;
        let failedTests = [];
        let codedTest = [];
        let logicTests = [];
        let passedTests = 0
        let passed200 = 0
        let headerRequest
        let testNumber
        let failedStep = [];
        let testType
        let resolvedData, pathRequest, methodRequest, requestUrl
        let globalContext, resolvedHeader
        beforeAll( async () => {
          try {
            testType = 'request'
            globalContext = new TestContext()
            const resultStep = await executeAllSteps([{"action":"mockUser","body":{"quantity":2,"prefix":"testDTO","badge":0}},{"action":"createChannel"}],globalContext)
            resultStep.forEach((step) => {
              failedStep.push({
                type: step.type,
                status: step.status,
                stepName: step.stepName,
                error: step.error
              })
            })
            const hasFailure = resultStep.some(step => !step.status);
              if (hasFailure) {
                  throw new Error(`beforeAll failed: ${JSON.stringify(failedStep, null, 2)}`);
              }
            headerRequest = {"x-session-token":"{{token}}"}
            resolvedHeader = resolveVariables(headerRequest, globalContext)
            pathRequest = "/Message/SendMessage"
            methodRequest = "POST"
            requestUrl = `${globalThis.url}${pathRequest}`
          } catch(error){
            console.error('beforeAll failed:', error);
            throw error; // Ném lỗi để Jest dừng
          }
        })

        
           
            it('Test case #1 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":123,"ref":123} ', async () => {
              testNumber = 1;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #2 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":123,"ref":""} ', async () => {
              testNumber = 2;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #3 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":123} ', async () => {
              testNumber = 3;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #4 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":123,"ref":"ref"} ', async () => {
              testNumber = 4;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #5 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"","ref":123} ', async () => {
              testNumber = 5;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #6 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"","ref":""} ', async () => {
              testNumber = 6;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #7 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":""} ', async () => {
              testNumber = 7;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #8 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"","ref":"ref"} ', async () => {
              testNumber = 8;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #9 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 9;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #10 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 10;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #11 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 11;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #12 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 12;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #13 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"ref":123} ', async () => {
              testNumber = 13;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #14 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"ref":""} ', async () => {
              testNumber = 14;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #15 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123} ', async () => {
              testNumber = 15;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #16 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"ref":"ref"} ', async () => {
              testNumber = 16;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #17 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"test DTO send message","ref":123} ', async () => {
              testNumber = 17;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #18 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"test DTO send message","ref":""} ', async () => {
              testNumber = 18;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #19 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"test DTO send message"} ', async () => {
              testNumber = 19;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #20 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":123,"content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 20;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":123,"content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #21 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":123,"ref":123} ', async () => {
              testNumber = 21;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #22 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":123,"ref":""} ', async () => {
              testNumber = 22;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #23 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":123} ', async () => {
              testNumber = 23;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #24 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":123,"ref":"ref"} ', async () => {
              testNumber = 24;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #25 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"","ref":123} ', async () => {
              testNumber = 25;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #26 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"","ref":""} ', async () => {
              testNumber = 26;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #27 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":""} ', async () => {
              testNumber = 27;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #28 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"","ref":"ref"} ', async () => {
              testNumber = 28;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #29 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 29;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #30 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 30;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #31 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 31;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #32 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 32;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #33 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"ref":123} ', async () => {
              testNumber = 33;
              totalTests++;
              const payloadObj = {"workspaceId":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #34 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"ref":""} ', async () => {
              testNumber = 34;
              totalTests++;
              const payloadObj = {"workspaceId":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #35 should return errors ["Could not resolve permission type"] when body {"workspaceId":123} ', async () => {
              testNumber = 35;
              totalTests++;
              const payloadObj = {"workspaceId":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #36 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"ref":"ref"} ', async () => {
              testNumber = 36;
              totalTests++;
              const payloadObj = {"workspaceId":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #37 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"test DTO send message","ref":123} ', async () => {
              testNumber = 37;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #38 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"test DTO send message","ref":""} ', async () => {
              testNumber = 38;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #39 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"test DTO send message"} ', async () => {
              testNumber = 39;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #40 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 40;
              totalTests++;
              const payloadObj = {"workspaceId":123,"content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #41 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":123,"ref":123} ', async () => {
              testNumber = 41;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #42 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":123,"ref":""} ', async () => {
              testNumber = 42;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #43 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":123} ', async () => {
              testNumber = 43;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #44 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":123,"ref":"ref"} ', async () => {
              testNumber = 44;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #45 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"","ref":123} ', async () => {
              testNumber = 45;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #46 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"","ref":""} ', async () => {
              testNumber = 46;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #47 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":""} ', async () => {
              testNumber = 47;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #48 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"","ref":"ref"} ', async () => {
              testNumber = 48;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #49 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 49;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #50 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 50;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #51 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 51;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #52 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 52;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #53 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","ref":123} ', async () => {
              testNumber = 53;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #54 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","ref":""} ', async () => {
              testNumber = 54;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #55 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":""} ', async () => {
              testNumber = 55;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #56 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","ref":"ref"} ', async () => {
              testNumber = 56;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #57 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 57;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #58 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 58;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #59 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"test DTO send message"} ', async () => {
              testNumber = 59;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #60 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 60;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #61 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":123,"ref":123} ', async () => {
              testNumber = 61;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #62 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":123,"ref":""} ', async () => {
              testNumber = 62;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #63 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":123} ', async () => {
              testNumber = 63;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #64 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":123,"ref":"ref"} ', async () => {
              testNumber = 64;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #65 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"","ref":123} ', async () => {
              testNumber = 65;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #66 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"","ref":""} ', async () => {
              testNumber = 66;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #67 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":""} ', async () => {
              testNumber = 67;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #68 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"","ref":"ref"} ', async () => {
              testNumber = 68;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #69 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 69;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #70 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 70;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #71 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 71;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #72 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 72;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #73 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","ref":123} ', async () => {
              testNumber = 73;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #74 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","ref":""} ', async () => {
              testNumber = 74;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #75 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid"} ', async () => {
              testNumber = 75;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #76 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","ref":"ref"} ', async () => {
              testNumber = 76;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #77 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 77;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #78 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 78;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #79 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"test DTO send message"} ', async () => {
              testNumber = 79;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #80 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"invalid","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 80;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"invalid","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #81 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":123,"ref":123} ', async () => {
              testNumber = 81;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #82 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":123,"ref":""} ', async () => {
              testNumber = 82;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #83 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":123} ', async () => {
              testNumber = 83;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #84 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":123,"ref":"ref"} ', async () => {
              testNumber = 84;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #85 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"","ref":123} ', async () => {
              testNumber = 85;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #86 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"","ref":""} ', async () => {
              testNumber = 86;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #87 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":""} ', async () => {
              testNumber = 87;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #88 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"","ref":"ref"} ', async () => {
              testNumber = 88;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #89 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 89;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #90 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 90;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #91 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 91;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #92 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 92;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #93 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","ref":123} ', async () => {
              testNumber = 93;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #94 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","ref":""} ', async () => {
              testNumber = 94;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #95 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}"} ', async () => {
              testNumber = 95;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #96 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","ref":"ref"} ', async () => {
              testNumber = 96;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #97 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 97;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #98 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 98;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #99 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"test DTO send message"} ', async () => {
              testNumber = 99;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #100 should return errors ["Could not resolve permission type"] when body {"workspaceId":123,"channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 100;
              totalTests++;
              const payloadObj = {"workspaceId":123,"channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #101 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":123,"ref":123} ', async () => {
              testNumber = 101;
              totalTests++;
              const payloadObj = {"channelId":123,"content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #102 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":123,"ref":""} ', async () => {
              testNumber = 102;
              totalTests++;
              const payloadObj = {"channelId":123,"content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #103 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":123} ', async () => {
              testNumber = 103;
              totalTests++;
              const payloadObj = {"channelId":123,"content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #104 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":123,"ref":"ref"} ', async () => {
              testNumber = 104;
              totalTests++;
              const payloadObj = {"channelId":123,"content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #105 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"","ref":123} ', async () => {
              testNumber = 105;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #106 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"","ref":""} ', async () => {
              testNumber = 106;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #107 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":""} ', async () => {
              testNumber = 107;
              totalTests++;
              const payloadObj = {"channelId":123,"content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #108 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"","ref":"ref"} ', async () => {
              testNumber = 108;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #109 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 109;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #110 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 110;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #111 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 111;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #112 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 112;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #113 should return errors ["Could not resolve permission type"] when body {"channelId":123,"ref":123} ', async () => {
              testNumber = 113;
              totalTests++;
              const payloadObj = {"channelId":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #114 should return errors ["Could not resolve permission type"] when body {"channelId":123,"ref":""} ', async () => {
              testNumber = 114;
              totalTests++;
              const payloadObj = {"channelId":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #115 should return errors ["Could not resolve permission type"] when body {"channelId":123} ', async () => {
              testNumber = 115;
              totalTests++;
              const payloadObj = {"channelId":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #116 should return errors ["Could not resolve permission type"] when body {"channelId":123,"ref":"ref"} ', async () => {
              testNumber = 116;
              totalTests++;
              const payloadObj = {"channelId":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #117 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"test DTO send message","ref":123} ', async () => {
              testNumber = 117;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #118 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"test DTO send message","ref":""} ', async () => {
              testNumber = 118;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #119 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"test DTO send message"} ', async () => {
              testNumber = 119;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #120 should return errors ["Could not resolve permission type"] when body {"channelId":123,"content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 120;
              totalTests++;
              const payloadObj = {"channelId":123,"content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #121 should return errors ["Could not resolve permission type"] when body {"content":123,"ref":123} ', async () => {
              testNumber = 121;
              totalTests++;
              const payloadObj = {"content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #122 should return errors ["Could not resolve permission type"] when body {"content":123,"ref":""} ', async () => {
              testNumber = 122;
              totalTests++;
              const payloadObj = {"content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #123 should return errors ["Could not resolve permission type"] when body {"content":123} ', async () => {
              testNumber = 123;
              totalTests++;
              const payloadObj = {"content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #124 should return errors ["Could not resolve permission type"] when body {"content":123,"ref":"ref"} ', async () => {
              testNumber = 124;
              totalTests++;
              const payloadObj = {"content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #125 should return errors ["Could not resolve permission type"] when body {"content":"","ref":123} ', async () => {
              testNumber = 125;
              totalTests++;
              const payloadObj = {"content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #126 should return errors ["Could not resolve permission type"] when body {"content":"","ref":""} ', async () => {
              testNumber = 126;
              totalTests++;
              const payloadObj = {"content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #127 should return errors ["Could not resolve permission type"] when body {"content":""} ', async () => {
              testNumber = 127;
              totalTests++;
              const payloadObj = {"content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #128 should return errors ["Could not resolve permission type"] when body {"content":"","ref":"ref"} ', async () => {
              testNumber = 128;
              totalTests++;
              const payloadObj = {"content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #129 should return errors ["Could not resolve permission type"] when body {"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 129;
              totalTests++;
              const payloadObj = {"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #130 should return errors ["Could not resolve permission type"] when body {"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 130;
              totalTests++;
              const payloadObj = {"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #131 should return errors ["Could not resolve permission type"] when body {"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 131;
              totalTests++;
              const payloadObj = {"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #132 should return errors ["Could not resolve permission type"] when body {"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 132;
              totalTests++;
              const payloadObj = {"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #133 should return errors ["Could not resolve permission type"] when body {"ref":123} ', async () => {
              testNumber = 133;
              totalTests++;
              const payloadObj = {"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #134 should return errors ["Could not resolve permission type"] when body {"ref":""} ', async () => {
              testNumber = 134;
              totalTests++;
              const payloadObj = {"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #135 should return errors ["Could not resolve permission type"] when body {} ', async () => {
              testNumber = 135;
              totalTests++;
              const payloadObj = {};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #136 should return errors ["Could not resolve permission type"] when body {"ref":"ref"} ', async () => {
              testNumber = 136;
              totalTests++;
              const payloadObj = {"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #137 should return errors ["Could not resolve permission type"] when body {"content":"test DTO send message","ref":123} ', async () => {
              testNumber = 137;
              totalTests++;
              const payloadObj = {"content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #138 should return errors ["Could not resolve permission type"] when body {"content":"test DTO send message","ref":""} ', async () => {
              testNumber = 138;
              totalTests++;
              const payloadObj = {"content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #139 should return errors ["Could not resolve permission type"] when body {"content":"test DTO send message"} ', async () => {
              testNumber = 139;
              totalTests++;
              const payloadObj = {"content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #140 should return errors ["Could not resolve permission type"] when body {"content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 140;
              totalTests++;
              const payloadObj = {"content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #141 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":123,"ref":123} ', async () => {
              testNumber = 141;
              totalTests++;
              const payloadObj = {"channelId":"","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #142 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":123,"ref":""} ', async () => {
              testNumber = 142;
              totalTests++;
              const payloadObj = {"channelId":"","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #143 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":123} ', async () => {
              testNumber = 143;
              totalTests++;
              const payloadObj = {"channelId":"","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #144 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":123,"ref":"ref"} ', async () => {
              testNumber = 144;
              totalTests++;
              const payloadObj = {"channelId":"","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #145 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"","ref":123} ', async () => {
              testNumber = 145;
              totalTests++;
              const payloadObj = {"channelId":"","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #146 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"","ref":""} ', async () => {
              testNumber = 146;
              totalTests++;
              const payloadObj = {"channelId":"","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #147 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":""} ', async () => {
              testNumber = 147;
              totalTests++;
              const payloadObj = {"channelId":"","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #148 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"","ref":"ref"} ', async () => {
              testNumber = 148;
              totalTests++;
              const payloadObj = {"channelId":"","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #149 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 149;
              totalTests++;
              const payloadObj = {"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #150 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 150;
              totalTests++;
              const payloadObj = {"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #151 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 151;
              totalTests++;
              const payloadObj = {"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #152 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 152;
              totalTests++;
              const payloadObj = {"channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #153 should return errors ["Could not resolve permission type"] when body {"channelId":"","ref":123} ', async () => {
              testNumber = 153;
              totalTests++;
              const payloadObj = {"channelId":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #154 should return errors ["Could not resolve permission type"] when body {"channelId":"","ref":""} ', async () => {
              testNumber = 154;
              totalTests++;
              const payloadObj = {"channelId":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #155 should return errors ["Could not resolve permission type"] when body {"channelId":""} ', async () => {
              testNumber = 155;
              totalTests++;
              const payloadObj = {"channelId":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #156 should return errors ["Could not resolve permission type"] when body {"channelId":"","ref":"ref"} ', async () => {
              testNumber = 156;
              totalTests++;
              const payloadObj = {"channelId":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #157 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 157;
              totalTests++;
              const payloadObj = {"channelId":"","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #158 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 158;
              totalTests++;
              const payloadObj = {"channelId":"","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #159 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"test DTO send message"} ', async () => {
              testNumber = 159;
              totalTests++;
              const payloadObj = {"channelId":"","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #160 should return errors ["Could not resolve permission type"] when body {"channelId":"","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 160;
              totalTests++;
              const payloadObj = {"channelId":"","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #161 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":123,"ref":123} ', async () => {
              testNumber = 161;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #162 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":123,"ref":""} ', async () => {
              testNumber = 162;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #163 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":123} ', async () => {
              testNumber = 163;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #164 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":123,"ref":"ref"} ', async () => {
              testNumber = 164;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #165 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"","ref":123} ', async () => {
              testNumber = 165;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #166 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"","ref":""} ', async () => {
              testNumber = 166;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #167 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":""} ', async () => {
              testNumber = 167;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #168 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"","ref":"ref"} ', async () => {
              testNumber = 168;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #169 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 169;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #170 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 170;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #171 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 171;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #172 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 172;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #173 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","ref":123} ', async () => {
              testNumber = 173;
              totalTests++;
              const payloadObj = {"channelId":"invalid","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #174 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","ref":""} ', async () => {
              testNumber = 174;
              totalTests++;
              const payloadObj = {"channelId":"invalid","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #175 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid"} ', async () => {
              testNumber = 175;
              totalTests++;
              const payloadObj = {"channelId":"invalid"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #176 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","ref":"ref"} ', async () => {
              testNumber = 176;
              totalTests++;
              const payloadObj = {"channelId":"invalid","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #177 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 177;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #178 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 178;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #179 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"test DTO send message"} ', async () => {
              testNumber = 179;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #180 should return errors ["Could not resolve permission type"] when body {"channelId":"invalid","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 180;
              totalTests++;
              const payloadObj = {"channelId":"invalid","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #181 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":123,"ref":123} ', async () => {
              testNumber = 181;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #182 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":123,"ref":""} ', async () => {
              testNumber = 182;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #183 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":123} ', async () => {
              testNumber = 183;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #184 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":123,"ref":"ref"} ', async () => {
              testNumber = 184;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #185 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"","ref":123} ', async () => {
              testNumber = 185;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #186 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"","ref":""} ', async () => {
              testNumber = 186;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #187 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":""} ', async () => {
              testNumber = 187;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #188 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"","ref":"ref"} ', async () => {
              testNumber = 188;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #189 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 189;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #190 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 190;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #191 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 191;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #192 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 192;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #193 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","ref":123} ', async () => {
              testNumber = 193;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #194 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","ref":""} ', async () => {
              testNumber = 194;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #195 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}"} ', async () => {
              testNumber = 195;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #196 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","ref":"ref"} ', async () => {
              testNumber = 196;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #197 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 197;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #198 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 198;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #199 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"test DTO send message"} ', async () => {
              testNumber = 199;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #200 should return errors ["Could not resolve permission type"] when body {"channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 200;
              totalTests++;
              const payloadObj = {"channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #201 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":123,"ref":123} ', async () => {
              testNumber = 201;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #202 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":123,"ref":""} ', async () => {
              testNumber = 202;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #203 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":123} ', async () => {
              testNumber = 203;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #204 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":123,"ref":"ref"} ', async () => {
              testNumber = 204;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #205 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"","ref":123} ', async () => {
              testNumber = 205;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #206 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"","ref":""} ', async () => {
              testNumber = 206;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #207 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":""} ', async () => {
              testNumber = 207;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #208 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"","ref":"ref"} ', async () => {
              testNumber = 208;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #209 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 209;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #210 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 210;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #211 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 211;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #212 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 212;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #213 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"ref":123} ', async () => {
              testNumber = 213;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #214 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"ref":""} ', async () => {
              testNumber = 214;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #215 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123} ', async () => {
              testNumber = 215;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #216 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"ref":"ref"} ', async () => {
              testNumber = 216;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #217 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"test DTO send message","ref":123} ', async () => {
              testNumber = 217;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #218 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"test DTO send message","ref":""} ', async () => {
              testNumber = 218;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #219 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"test DTO send message"} ', async () => {
              testNumber = 219;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #220 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":123,"content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 220;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":123,"content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #221 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":123,"ref":123} ', async () => {
              testNumber = 221;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #222 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":123,"ref":""} ', async () => {
              testNumber = 222;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #223 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":123} ', async () => {
              testNumber = 223;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #224 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":123,"ref":"ref"} ', async () => {
              testNumber = 224;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #225 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"","ref":123} ', async () => {
              testNumber = 225;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #226 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"","ref":""} ', async () => {
              testNumber = 226;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #227 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":""} ', async () => {
              testNumber = 227;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #228 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"","ref":"ref"} ', async () => {
              testNumber = 228;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #229 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 229;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #230 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 230;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #231 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 231;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #232 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 232;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #233 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","ref":123} ', async () => {
              testNumber = 233;
              totalTests++;
              const payloadObj = {"workspaceId":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #234 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","ref":""} ', async () => {
              testNumber = 234;
              totalTests++;
              const payloadObj = {"workspaceId":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #235 should return errors ["Could not resolve permission type"] when body {"workspaceId":""} ', async () => {
              testNumber = 235;
              totalTests++;
              const payloadObj = {"workspaceId":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #236 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","ref":"ref"} ', async () => {
              testNumber = 236;
              totalTests++;
              const payloadObj = {"workspaceId":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #237 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 237;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #238 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 238;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #239 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"test DTO send message"} ', async () => {
              testNumber = 239;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #240 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 240;
              totalTests++;
              const payloadObj = {"workspaceId":"","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #241 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":123,"ref":123} ', async () => {
              testNumber = 241;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #242 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":123,"ref":""} ', async () => {
              testNumber = 242;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #243 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":123} ', async () => {
              testNumber = 243;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #244 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":123,"ref":"ref"} ', async () => {
              testNumber = 244;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #245 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"","ref":123} ', async () => {
              testNumber = 245;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #246 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"","ref":""} ', async () => {
              testNumber = 246;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #247 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":""} ', async () => {
              testNumber = 247;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #248 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"","ref":"ref"} ', async () => {
              testNumber = 248;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #249 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 249;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #250 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 250;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #251 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 251;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #252 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 252;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #253 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","ref":123} ', async () => {
              testNumber = 253;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #254 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","ref":""} ', async () => {
              testNumber = 254;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #255 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":""} ', async () => {
              testNumber = 255;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #256 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","ref":"ref"} ', async () => {
              testNumber = 256;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #257 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 257;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #258 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 258;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #259 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"test DTO send message"} ', async () => {
              testNumber = 259;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #260 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 260;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #261 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":123,"ref":123} ', async () => {
              testNumber = 261;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #262 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":123,"ref":""} ', async () => {
              testNumber = 262;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #263 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":123} ', async () => {
              testNumber = 263;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #264 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":123,"ref":"ref"} ', async () => {
              testNumber = 264;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #265 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"","ref":123} ', async () => {
              testNumber = 265;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #266 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"","ref":""} ', async () => {
              testNumber = 266;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #267 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":""} ', async () => {
              testNumber = 267;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #268 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"","ref":"ref"} ', async () => {
              testNumber = 268;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #269 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 269;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #270 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 270;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #271 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 271;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #272 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 272;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #273 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","ref":123} ', async () => {
              testNumber = 273;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #274 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","ref":""} ', async () => {
              testNumber = 274;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #275 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid"} ', async () => {
              testNumber = 275;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #276 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","ref":"ref"} ', async () => {
              testNumber = 276;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #277 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 277;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #278 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 278;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #279 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"test DTO send message"} ', async () => {
              testNumber = 279;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #280 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"invalid","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 280;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"invalid","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #281 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":123,"ref":123} ', async () => {
              testNumber = 281;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #282 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":123,"ref":""} ', async () => {
              testNumber = 282;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #283 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":123} ', async () => {
              testNumber = 283;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #284 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":123,"ref":"ref"} ', async () => {
              testNumber = 284;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #285 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"","ref":123} ', async () => {
              testNumber = 285;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #286 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"","ref":""} ', async () => {
              testNumber = 286;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #287 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":""} ', async () => {
              testNumber = 287;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #288 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"","ref":"ref"} ', async () => {
              testNumber = 288;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #289 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 289;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #290 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 290;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #291 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 291;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #292 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 292;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #293 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","ref":123} ', async () => {
              testNumber = 293;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #294 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","ref":""} ', async () => {
              testNumber = 294;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #295 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}"} ', async () => {
              testNumber = 295;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #296 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","ref":"ref"} ', async () => {
              testNumber = 296;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #297 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 297;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #298 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 298;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #299 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"test DTO send message"} ', async () => {
              testNumber = 299;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #300 should return errors ["Could not resolve permission type"] when body {"workspaceId":"","channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 300;
              totalTests++;
              const payloadObj = {"workspaceId":"","channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #301 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":123,"ref":123} ', async () => {
              testNumber = 301;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #302 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":123,"ref":""} ', async () => {
              testNumber = 302;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #303 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":123} ', async () => {
              testNumber = 303;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #304 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":123,"ref":"ref"} ', async () => {
              testNumber = 304;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #305 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"","ref":123} ', async () => {
              testNumber = 305;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #306 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"","ref":""} ', async () => {
              testNumber = 306;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #307 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":""} ', async () => {
              testNumber = 307;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #308 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"","ref":"ref"} ', async () => {
              testNumber = 308;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #309 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 309;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #310 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 310;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #311 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 311;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #312 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 312;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #313 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"ref":123} ', async () => {
              testNumber = 313;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #314 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"ref":""} ', async () => {
              testNumber = 314;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #315 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123} ', async () => {
              testNumber = 315;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #316 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"ref":"ref"} ', async () => {
              testNumber = 316;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #317 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"test DTO send message","ref":123} ', async () => {
              testNumber = 317;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #318 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"test DTO send message","ref":""} ', async () => {
              testNumber = 318;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #319 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"test DTO send message"} ', async () => {
              testNumber = 319;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #320 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":123,"content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 320;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":123,"content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #321 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":123,"ref":123} ', async () => {
              testNumber = 321;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #322 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":123,"ref":""} ', async () => {
              testNumber = 322;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #323 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":123} ', async () => {
              testNumber = 323;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #324 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":123,"ref":"ref"} ', async () => {
              testNumber = 324;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #325 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"","ref":123} ', async () => {
              testNumber = 325;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #326 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"","ref":""} ', async () => {
              testNumber = 326;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #327 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":""} ', async () => {
              testNumber = 327;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #328 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"","ref":"ref"} ', async () => {
              testNumber = 328;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #329 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 329;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #330 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 330;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #331 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 331;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #332 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 332;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #333 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","ref":123} ', async () => {
              testNumber = 333;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #334 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","ref":""} ', async () => {
              testNumber = 334;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #335 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid"} ', async () => {
              testNumber = 335;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #336 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","ref":"ref"} ', async () => {
              testNumber = 336;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #337 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 337;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #338 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 338;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #339 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"test DTO send message"} ', async () => {
              testNumber = 339;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #340 should return errors ["Unsupported permission type"] when body {"workspaceId":"invalid","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 340;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #341 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":123,"ref":123} ', async () => {
              testNumber = 341;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #342 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":123,"ref":""} ', async () => {
              testNumber = 342;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #343 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":123} ', async () => {
              testNumber = 343;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #344 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":123,"ref":"ref"} ', async () => {
              testNumber = 344;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #345 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"","ref":123} ', async () => {
              testNumber = 345;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #346 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"","ref":""} ', async () => {
              testNumber = 346;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #347 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":""} ', async () => {
              testNumber = 347;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #348 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"","ref":"ref"} ', async () => {
              testNumber = 348;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #349 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 349;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #350 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 350;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #351 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 351;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #352 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 352;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #353 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","ref":123} ', async () => {
              testNumber = 353;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #354 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","ref":""} ', async () => {
              testNumber = 354;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #355 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":""} ', async () => {
              testNumber = 355;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #356 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","ref":"ref"} ', async () => {
              testNumber = 356;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #357 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 357;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #358 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 358;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #359 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"test DTO send message"} ', async () => {
              testNumber = 359;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #360 should return errors ["Could not resolve permission type"] when body {"workspaceId":"invalid","channelId":"","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 360;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #361 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":123,"ref":123} ', async () => {
              testNumber = 361;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #362 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":123,"ref":""} ', async () => {
              testNumber = 362;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #363 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":123} ', async () => {
              testNumber = 363;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #364 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":123,"ref":"ref"} ', async () => {
              testNumber = 364;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #365 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"","ref":123} ', async () => {
              testNumber = 365;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #366 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"","ref":""} ', async () => {
              testNumber = 366;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #367 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":""} ', async () => {
              testNumber = 367;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #368 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"","ref":"ref"} ', async () => {
              testNumber = 368;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #369 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 369;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #370 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 370;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #371 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 371;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #372 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 372;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #373 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","ref":123} ', async () => {
              testNumber = 373;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #374 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","ref":""} ', async () => {
              testNumber = 374;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #375 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid"} ', async () => {
              testNumber = 375;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #376 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","ref":"ref"} ', async () => {
              testNumber = 376;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #377 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 377;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #378 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 378;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #379 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"test DTO send message"} ', async () => {
              testNumber = 379;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #380 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"invalid","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 380;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"invalid","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #381 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":123,"ref":123} ', async () => {
              testNumber = 381;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #382 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":123,"ref":""} ', async () => {
              testNumber = 382;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #383 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":123} ', async () => {
              testNumber = 383;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #384 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":123,"ref":"ref"} ', async () => {
              testNumber = 384;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #385 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"","ref":123} ', async () => {
              testNumber = 385;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #386 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"","ref":""} ', async () => {
              testNumber = 386;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #387 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":""} ', async () => {
              testNumber = 387;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #388 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"","ref":"ref"} ', async () => {
              testNumber = 388;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #389 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 389;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #390 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 390;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #391 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 391;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #392 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 392;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #393 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","ref":123} ', async () => {
              testNumber = 393;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #394 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","ref":""} ', async () => {
              testNumber = 394;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #395 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}"} ', async () => {
              testNumber = 395;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #396 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","ref":"ref"} ', async () => {
              testNumber = 396;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #397 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 397;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #398 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 398;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #399 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"test DTO send message"} ', async () => {
              testNumber = 399;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #400 should return errors ["Invalid channel"] when body {"workspaceId":"invalid","channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 400;
              totalTests++;
              const payloadObj = {"workspaceId":"invalid","channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #401 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":123,"ref":123} ', async () => {
              testNumber = 401;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #402 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":123,"ref":""} ', async () => {
              testNumber = 402;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #403 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":123} ', async () => {
              testNumber = 403;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #404 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":123,"ref":"ref"} ', async () => {
              testNumber = 404;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #405 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"","ref":123} ', async () => {
              testNumber = 405;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #406 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"","ref":""} ', async () => {
              testNumber = 406;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #407 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":""} ', async () => {
              testNumber = 407;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #408 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"","ref":"ref"} ', async () => {
              testNumber = 408;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #409 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 409;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #410 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 410;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #411 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 411;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #412 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 412;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #413 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"ref":123} ', async () => {
              testNumber = 413;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #414 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"ref":""} ', async () => {
              testNumber = 414;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #415 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123} ', async () => {
              testNumber = 415;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #416 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"ref":"ref"} ', async () => {
              testNumber = 416;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #417 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"test DTO send message","ref":123} ', async () => {
              testNumber = 417;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #418 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"test DTO send message","ref":""} ', async () => {
              testNumber = 418;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #419 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"test DTO send message"} ', async () => {
              testNumber = 419;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #420 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":123,"content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 420;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":123,"content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #421 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":123,"ref":123} ', async () => {
              testNumber = 421;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #422 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":123,"ref":""} ', async () => {
              testNumber = 422;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #423 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":123} ', async () => {
              testNumber = 423;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #424 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":123,"ref":"ref"} ', async () => {
              testNumber = 424;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #425 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"","ref":123} ', async () => {
              testNumber = 425;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #426 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"","ref":""} ', async () => {
              testNumber = 426;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #427 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":""} ', async () => {
              testNumber = 427;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #428 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"","ref":"ref"} ', async () => {
              testNumber = 428;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #429 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 429;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #430 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 430;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #431 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 431;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #432 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 432;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #433 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","ref":123} ', async () => {
              testNumber = 433;
              totalTests++;
              const payloadObj = {"workspaceId":"0","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #434 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","ref":""} ', async () => {
              testNumber = 434;
              totalTests++;
              const payloadObj = {"workspaceId":"0","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #435 should return errors ["Unsupported permission type"] when body {"workspaceId":"0"} ', async () => {
              testNumber = 435;
              totalTests++;
              const payloadObj = {"workspaceId":"0"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #436 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","ref":"ref"} ', async () => {
              testNumber = 436;
              totalTests++;
              const payloadObj = {"workspaceId":"0","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #437 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 437;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #438 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 438;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #439 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"test DTO send message"} ', async () => {
              testNumber = 439;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #440 should return errors ["Unsupported permission type"] when body {"workspaceId":"0","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 440;
              totalTests++;
              const payloadObj = {"workspaceId":"0","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Unsupported permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #441 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":123,"ref":123} ', async () => {
              testNumber = 441;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #442 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":123,"ref":""} ', async () => {
              testNumber = 442;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #443 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":123} ', async () => {
              testNumber = 443;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #444 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":123,"ref":"ref"} ', async () => {
              testNumber = 444;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #445 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"","ref":123} ', async () => {
              testNumber = 445;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #446 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"","ref":""} ', async () => {
              testNumber = 446;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #447 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":""} ', async () => {
              testNumber = 447;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #448 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"","ref":"ref"} ', async () => {
              testNumber = 448;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #449 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 449;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #450 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 450;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #451 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 451;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #452 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 452;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #453 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","ref":123} ', async () => {
              testNumber = 453;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #454 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","ref":""} ', async () => {
              testNumber = 454;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #455 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":""} ', async () => {
              testNumber = 455;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #456 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","ref":"ref"} ', async () => {
              testNumber = 456;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #457 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 457;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #458 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 458;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #459 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"test DTO send message"} ', async () => {
              testNumber = 459;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #460 should return errors ["Could not resolve permission type"] when body {"workspaceId":"0","channelId":"","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 460;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Could not resolve permission type"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #461 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":123,"ref":123} ', async () => {
              testNumber = 461;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #462 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":123,"ref":""} ', async () => {
              testNumber = 462;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #463 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":123} ', async () => {
              testNumber = 463;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #464 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":123,"ref":"ref"} ', async () => {
              testNumber = 464;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #465 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"","ref":123} ', async () => {
              testNumber = 465;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #466 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"","ref":""} ', async () => {
              testNumber = 466;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #467 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":""} ', async () => {
              testNumber = 467;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #468 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"","ref":"ref"} ', async () => {
              testNumber = 468;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #469 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 469;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #470 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 470;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #471 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 471;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #472 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 472;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #473 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","ref":123} ', async () => {
              testNumber = 473;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #474 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","ref":""} ', async () => {
              testNumber = 474;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #475 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid"} ', async () => {
              testNumber = 475;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #476 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","ref":"ref"} ', async () => {
              testNumber = 476;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #477 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 477;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #478 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 478;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #479 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"test DTO send message"} ', async () => {
              testNumber = 479;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #480 should return errors ["Invalid channel"] when body {"workspaceId":"0","channelId":"invalid","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 480;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"invalid","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["Invalid channel"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #481 should return errors ["content must be string","ref must be string"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":123,"ref":123} ', async () => {
              testNumber = 481;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":123,"ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must be string","ref must be string"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #482 should return errors ["content must be string","ref must have more than 1 length"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":123,"ref":""} ', async () => {
              testNumber = 482;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":123,"ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must be string","ref must have more than 1 length"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #483 should return errors ["content must be string","must have required property \'ref\'"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":123} ', async () => {
              testNumber = 483;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must be string","must have required property 'ref'"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #484 should return errors ["content must be string"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":123,"ref":"ref"} ', async () => {
              testNumber = 484;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":123,"ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must be string"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #485 should return errors ["content must to range from 1 to 2000 length","ref must be string"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"","ref":123} ', async () => {
              testNumber = 485;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must to range from 1 to 2000 length","ref must be string"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #486 should return errors ["content must to range from 1 to 2000 length","ref must have more than 1 length"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"","ref":""} ', async () => {
              testNumber = 486;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must to range from 1 to 2000 length","ref must have more than 1 length"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #487 should return errors ["content must to range from 1 to 2000 length","must have required property \'ref\'"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":""} ', async () => {
              testNumber = 487;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must to range from 1 to 2000 length","must have required property 'ref'"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #488 should return errors ["content must to range from 1 to 2000 length"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"","ref":"ref"} ', async () => {
              testNumber = 488;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must to range from 1 to 2000 length"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #489 should return errors ["content must to range from 1 to 2000 length","ref must be string"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123} ', async () => {
              testNumber = 489;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must to range from 1 to 2000 length","ref must be string"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #490 should return errors ["content must to range from 1 to 2000 length","ref must have more than 1 length"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""} ', async () => {
              testNumber = 490;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must to range from 1 to 2000 length","ref must have more than 1 length"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #491 should return errors ["content must to range from 1 to 2000 length","must have required property \'ref\'"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"} ', async () => {
              testNumber = 491;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must to range from 1 to 2000 length","must have required property 'ref'"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #492 should return errors ["content must to range from 1 to 2000 length"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"} ', async () => {
              testNumber = 492;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["content must to range from 1 to 2000 length"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #493 should return errors ["must have required property \'content\'","ref must be string"] when body {"workspaceId":"0","channelId":"{{channelId}}","ref":123} ', async () => {
              testNumber = 493;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["must have required property 'content'","ref must be string"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #494 should return errors ["must have required property \'content\'","ref must have more than 1 length"] when body {"workspaceId":"0","channelId":"{{channelId}}","ref":""} ', async () => {
              testNumber = 494;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["must have required property 'content'","ref must have more than 1 length"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #495 should return errors ["must have required property \'content\'","must have required property \'ref\'"] when body {"workspaceId":"0","channelId":"{{channelId}}"} ', async () => {
              testNumber = 495;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["must have required property 'content'","must have required property 'ref'"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #496 should return errors ["must have required property \'content\'"] when body {"workspaceId":"0","channelId":"{{channelId}}","ref":"ref"} ', async () => {
              testNumber = 496;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["must have required property 'content'"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #497 should return errors ["ref must be string"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"test DTO send message","ref":123} ', async () => {
              testNumber = 497;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"test DTO send message","ref":123};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["ref must be string"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #498 should return errors ["ref must have more than 1 length"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"test DTO send message","ref":""} ', async () => {
              testNumber = 498;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"test DTO send message","ref":""};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["ref must have more than 1 length"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #499 should return errors ["must have required property \'ref\'"] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"test DTO send message"} ', async () => {
              testNumber = 499;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"test DTO send message"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  ["must have required property 'ref'"].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

           
            it('Test case #500 should return errors [] when body {"workspaceId":"0","channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"} ', async () => {
              testNumber = 500;
              totalTests++;
              const payloadObj = {"workspaceId":"0","channelId":"{{channelId}}","content":"test DTO send message","ref":"ref"};
              resolvedData = resolveVariables(payloadObj,globalContext );
            try {
              const response = await axios.post(
                requestUrl, 
                resolvedData,
                {
                  headers: {...resolvedHeader},
                   validateStatus: () => true 
                }
              );

            const data = response.data;
            const expectJson =  [].sort()

            let expectDetails;
                  let softExpectDetails;
                  switch (response.status) {
                    case 200:
                      expectDetails = Array.isArray(data?.error?.details)
                        ? data.error.details
                        : [];
                      softExpectDetails = [...expectDetails].sort();
                      try {
                        expect(expectJson).toEqual(softExpectDetails)
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 200,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
                    case 403:
                      expectDetails = Array.isArray(data) ? data : [data]; // always array
                      softExpectDetails = [...expectDetails].sort(); // optional sort if needed
                      try {
                        expect(expectJson).toEqual(softExpectDetails);
                        passedTests++
                        codedTest.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                        })
                      } catch (error) {
                        const { missing, extra } = summaryFields(softExpectDetails, expectJson);
                        failedTests.push({
                          testcase: testNumber,
                          code: 403,
                          body: resolvedData,
                          missing: missing || [],
                          extra: extra || []
                        })
                      }
                      break;
            
                    case 500:
                      failedTests.push({
                        testcase: testNumber,
                        code: 500,
                        errorDetails: expectJson,
                      });
            
                      break;
                    default:
            
                  }
            }catch (error){
              console.log(error)
            }
            });

      afterAll(async () => {
      const resultStep = await executeAllSteps([{"action":"deleteMockedUsers","method":"DELETE","path":"/InternalFaker/DeleteMockedUsers","body":{"prefix":"testDTO"}}],globalContext)
        resultStep.forEach((step) => {
          failedStep.push({
            type: step.type,
            status: step.status,
            stepName: step.stepName,
            error: step.error
          })
        })
        const folderPath = path.join(__dirname, '../reports/send-message');
        if (!fs.existsSync(folderPath)) {
            fs.mkdirSync(folderPath, { recursive: true });
        }
        const classNames = `send-message`;
        const summary = summarizeErrors(failedTests,codedTest, passed200, passed201);
        const reportFileName = `send-message-request-${getTime()}.report.txt`;  
        const { combinedReportTemplate } = await import('../../utils/report-file');
        const reportContent = combinedReportTemplate(
            classNames,
            globalThis.url,
            pathRequest,
            failedStep,
            passedTests,
            failedTests,
            totalTests,
            logicTests,
            summary,
            testType
        );
        const reportPath = path.join(folderPath, reportFileName);
        fs.writeFileSync(reportPath, reportContent, 'utf-8');
        console.log(`📄 Combined report generated: ${reportPath}`);
      });
                          
    });

  